*Status Update for Final Project*

So far, we've made good progress on our final project building the game 2048 in 
Elm. Our goal so far has been to build all main gameplay logic and leave the final
graphics for the next week. 

After originally using a matrix library for our game board, we decided to refactor
our code to use a list of lists instead, as we realized it would be necessary to 
perform recursion on the board itself, which would require direct access. As of now,
our model consists solely of the Grid (game board). We are also using several type
aliases to aid with safety concerns (making sure we are consistent with our notions
of integer-indices and integer-values, etc) and make things easier to manipulate.

Using the homework 2 Pi.elm file as a starting point, we followed the same format
with all of the main Elm MVC functions and edited them to suit our needs. As mentioned,
our model right now consists solely of the board but this will change over the next 
week when we add a total_score and possibly more to it to keep track of game state. 
Our subscription function uses the Browser.Events library to take in keystrokes and 
convert them to Sub Msg to then be used by update(). As of now, update takes in one 
of the four arrow key directions and recursively calls update with a Tick, while 
any other keystoke simply does nothing. We plan to make the recursive call to update
preceeded by the shifting (based on which arrow key), but have not yet implemented this.
See more below on combining and shifting.

Similar to homework 2, a call to update with a Tick randomly generates a "play"
which consists of an index (into the flattened list of lists) and a num (either
a 2 or 4). These are then used to place a newly populated tile in after the move 
happens. 

For now, we are simply displaying the list as bullet points in our .html file but
once the gameaplay logic is done we will be spending most of our time focusing on 
fixing up the graphics so they are as similar to the original game as possible. 

Next we plan to work on the combining of equal values and shifting of elements. We
realized that we could do this by writing a single shift function (ie to shift left)
and then right the other directions (right, up, down) in terms of matrix operations
(like transpose and reflect) and the shift. This greatly simplifies the logic.

From there we will work on the view function in order to actually see the grid in 
action. Along with this will come score counter, new game/reset button, as well as
graphics to make the game look nicer visually. As mentioned earlier, we will likely
need to add to our model, and so we would do that at this time.

Originally, we had wanted to create a race version of the game, in which two players
could compete. In this version, one player would use the arrow keys, while the other
would use the wasd keys. We still would like to implement this feature, but are currently
focusing to get the main functionality. Once we have that, we will try to make additions such
as this, as well as any quality of life changes we see fit.
